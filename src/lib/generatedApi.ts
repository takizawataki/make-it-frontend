/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * 「make it !」REST API仕様書
 * OpenAPI spec version: 0.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import { customInstance } from './apiClient';
export type GetSessionParams = {
/**
 * ユーザー ID（Cognito の sub 属性）
 */
userId: string;
};

export interface CreateCognitoUserRequest {
  /** 被招待者のメールアドレス */
  email: string;
  /** 招待者の cognito sub 属性 */
  inviter: string;
}

export interface UserUpdateResponse {
  /** ユーザー名 */
  displayName?: string;
  /** ユーザーのメールアドレス */
  email: string;
  /** 転送されたセッション IDのリスト */
  escalatedSessionIds?: string[];
  /** 招待者のユーザー ID */
  inviter?: string;
  /** セッション IDのリスト */
  sessionIds?: string[];
  /** ユーザー ID（Cognito の sub 属性） */
  userId: string;
}

export interface UserUpdateRequest {
  /** ユーザー名 */
  displayName: string;
}

export interface UserUserResponse {
  /** ユーザー名 */
  displayName?: string;
  /** ユーザーのメールアドレス */
  email: string;
  /** 転送されたセッション IDのリスト */
  escalatedSessionIds?: string[];
  /** 招待者のユーザー ID */
  inviter?: string;
  /** セッション IDのリスト */
  sessionIds?: string[];
  /** ユーザー ID（Cognito の sub 属性） */
  userId: string;
}

export interface SendSummaryRequest {
  /** 送信元メールアドレス */
  fromUserEmail: string;
  /** 送信元 User ID */
  fromUserId: string;
  /** セッション ID */
  sessionId: string;
  /** 送信先 User ID */
  toUserId?: string;
}

export interface SummarizeResponse {
  /** 要約されたテキスト */
  summarizedText: string;
}

export interface SummarizeRequest {
  /** セッション ID */
  sessionId: string;
}

export type SessionSessionResponseSessionHistoryItem = {
  /** メッセージ */
  message: string;
  /** 発言者の役割 */
  role: string;
};

export interface SessionSessionResponse {
  /** メッセージ開始日時（ISO8601 形式） */
  createdAt: string;
  /** 転送されたセッションかどうか */
  isEscalated: boolean;
  /** セッション履歴 */
  sessionHistory: SessionSessionResponseSessionHistoryItem[];
  /** セッション ID */
  sessionId: string;
  /** セッションタイトル */
  sessionTitle: string;
  /** メッセージ更新日時（ISO8601 形式） */
  updatedAt: string;
}

export type SessionResponseSessionsItem = {
  /** メッセージ開始日時（ISO8601 形式） */
  createdAt: string;
  /** 転送されたセッションかどうか */
  isEscalated: boolean;
  /** セッション ID */
  sessionId: string;
  /** セッションタイトル */
  sessionTitle: string;
  /** メッセージ更新日時（ISO8601 形式） */
  updatedAt: string;
};

export type SessionResponseEscalatedSessionsItem = {
  /** メッセージ開始日時（ISO8601 形式） */
  createdAt: string;
  /** 転送されたセッションかどうか */
  isEscalated: boolean;
  /** セッション ID */
  sessionId: string;
  /** セッションタイトル */
  sessionTitle: string;
  /** メッセージ更新日時（ISO8601 形式） */
  updatedAt: string;
};

export interface SessionResponse {
  /** 転送されたセッション情報のリスト */
  escalatedSessions: SessionResponseEscalatedSessionsItem[];
  /** セッション情報のリスト */
  sessions: SessionResponseSessionsItem[];
}

export interface GenerateSessionTitleResponse {
  /** セッションタイトル */
  sessionTitle: string;
}

export type GenerateSessionTitleRequestSessionHistoryItem = {
  /** メッセージ */
  message: string;
  /** 発言者の役割 */
  role: string;
};

export interface GenerateSessionTitleRequest {
  /** セッション履歴 */
  sessionHistory: GenerateSessionTitleRequestSessionHistoryItem[];
  /** セッション ID */
  sessionId: string;
}

export interface GenerateAiReplyResponse {
  /** AI からの回答文 */
  message: string;
}

/**
 * ユーザーエージェント情報
 */
export type GenerateAiReplyRequestUserAgent = {
  /** ブラウザ名 */
  browserName: string;
  /** デバイス名 */
  deviceName: string;
  /** OS 名 */
  osName: string;
};

export interface GenerateAiReplyRequest {
  /** メッセージ送信日時（ISO8601 形式） */
  dateTime: string;
  /** ユーザーからの質問文 */
  message: string;
  /** セッション ID */
  sessionId: string;
  /** ユーザーエージェント情報 */
  userAgent?: GenerateAiReplyRequestUserAgent;
  /** ユーザー ID（Cognito の sub 属性） */
  userId: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  /**
 * AI がユーザーの質問に回答を生成します
 * @summary AI 回答生成
 */
export const postGenerateAiReplyLambdaFunctionURL = (
    generateAiReplyRequest: GenerateAiReplyRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenerateAiReplyResponse>(
      {url: `/api/generateAiReply(Lambda function URL)`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generateAiReplyRequest
    },
      options);
    }
  
/**
 * セッションタイトル（12 文字以内）を生成します
 * @summary セッションタイトル生成
 */
export const postGenerateSessionTitle = (
    generateSessionTitleRequest: GenerateSessionTitleRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenerateSessionTitleResponse>(
      {url: `/api/generate-session-title`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: generateSessionTitleRequest
    },
      options);
    }
  
/**
 * チャット一覧を取得します
 * @summary チャット一覧取得
 */
export const getSession = (
    params: GetSessionParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SessionResponse>(
      {url: `/api/session`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * チャットを取得します
 * @summary チャット取得
 */
export const getSessionSessionId = (
    sessionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SessionSessionResponse>(
      {url: `/api/session/${sessionId}`, method: 'GET'
    },
      options);
    }
  
/**
 * 会話履歴を要約します
 * @summary サマライズ実行
 */
export const postSummarize = (
    summarizeRequest: SummarizeRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SummarizeResponse>(
      {url: `/api/summarize`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: summarizeRequest
    },
      options);
    }
  
/**
 * 要約結果を送信します
 * @summary サマリーメール送信
 */
export const postSendSummary = (
    sendSummaryRequest: SendSummaryRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/send-summary`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendSummaryRequest
    },
      options);
    }
  
/**
 * ユーザー情報を取得します
 * @summary ユーザー情報取得
 */
export const getUserUserId = (
    userId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserUserResponse>(
      {url: `/api/user/${userId}`, method: 'GET'
    },
      options);
    }
  
/**
 * ユーザー情報を更新します
 * @summary ユーザー情報更新
 */
export const putUserUserId = (
    userId: string,
    userUpdateRequest: UserUpdateRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserUpdateResponse>(
      {url: `/api/user/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userUpdateRequest
    },
      options);
    }
  
/**
 * Cognito ユーザーを作成します
 * @summary Cognito ユーザー作成
 */
export const postCreateCognitoUser = (
    createCognitoUserRequest: CreateCognitoUserRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/api/create-cognito-user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCognitoUserRequest
    },
      options);
    }
  
export type PostGenerateAiReplyLambdaFunctionURLResult = NonNullable<Awaited<ReturnType<typeof postGenerateAiReplyLambdaFunctionURL>>>
export type PostGenerateSessionTitleResult = NonNullable<Awaited<ReturnType<typeof postGenerateSessionTitle>>>
export type GetSessionResult = NonNullable<Awaited<ReturnType<typeof getSession>>>
export type GetSessionSessionIdResult = NonNullable<Awaited<ReturnType<typeof getSessionSessionId>>>
export type PostSummarizeResult = NonNullable<Awaited<ReturnType<typeof postSummarize>>>
export type PostSendSummaryResult = NonNullable<Awaited<ReturnType<typeof postSendSummary>>>
export type GetUserUserIdResult = NonNullable<Awaited<ReturnType<typeof getUserUserId>>>
export type PutUserUserIdResult = NonNullable<Awaited<ReturnType<typeof putUserUserId>>>
export type PostCreateCognitoUserResult = NonNullable<Awaited<ReturnType<typeof postCreateCognitoUser>>>


export const getPostGenerateAiReplyLambdaFunctionURLResponseMock = (overrideResponse: Partial< GenerateAiReplyResponse > = {}): GenerateAiReplyResponse => ({message: faker.word.sample(), ...overrideResponse})

export const getPostGenerateSessionTitleResponseMock = (overrideResponse: Partial< GenerateSessionTitleResponse > = {}): GenerateSessionTitleResponse => ({sessionTitle: faker.word.sample(), ...overrideResponse})

export const getGetSessionResponseMock = (overrideResponse: Partial< SessionResponse > = {}): SessionResponse => ({escalatedSessions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: faker.word.sample(), isEscalated: faker.datatype.boolean(), sessionId: faker.word.sample(), sessionTitle: faker.word.sample(), updatedAt: faker.word.sample()})), sessions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: faker.word.sample(), isEscalated: faker.datatype.boolean(), sessionId: faker.word.sample(), sessionTitle: faker.word.sample(), updatedAt: faker.word.sample()})), ...overrideResponse})

export const getGetSessionSessionIdResponseMock = (overrideResponse: Partial< SessionSessionResponse > = {}): SessionSessionResponse => ({createdAt: faker.word.sample(), isEscalated: faker.datatype.boolean(), sessionHistory: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({message: faker.word.sample(), role: faker.word.sample()})), sessionId: faker.word.sample(), sessionTitle: faker.word.sample(), updatedAt: faker.word.sample(), ...overrideResponse})

export const getPostSummarizeResponseMock = (overrideResponse: Partial< SummarizeResponse > = {}): SummarizeResponse => ({summarizedText: faker.word.sample(), ...overrideResponse})

export const getGetUserUserIdResponseMock = (overrideResponse: Partial< UserUserResponse > = {}): UserUserResponse => ({displayName: faker.helpers.arrayElement([faker.word.sample(), undefined]), email: faker.word.sample(), escalatedSessionIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), inviter: faker.helpers.arrayElement([faker.word.sample(), undefined]), sessionIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userId: faker.word.sample(), ...overrideResponse})

export const getPutUserUserIdResponseMock = (overrideResponse: Partial< UserUpdateResponse > = {}): UserUpdateResponse => ({displayName: faker.helpers.arrayElement([faker.word.sample(), undefined]), email: faker.word.sample(), escalatedSessionIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), inviter: faker.helpers.arrayElement([faker.word.sample(), undefined]), sessionIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userId: faker.word.sample(), ...overrideResponse})


export const getPostGenerateAiReplyLambdaFunctionURLMockHandler = (overrideResponse?: GenerateAiReplyResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GenerateAiReplyResponse> | GenerateAiReplyResponse)) => {
  return http.post('*/generateAiReply(Lambda function URL)', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostGenerateAiReplyLambdaFunctionURLResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostGenerateSessionTitleMockHandler = (overrideResponse?: GenerateSessionTitleResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GenerateSessionTitleResponse> | GenerateSessionTitleResponse)) => {
  return http.post('*/generate-session-title', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostGenerateSessionTitleResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetSessionMockHandler = (overrideResponse?: SessionResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SessionResponse> | SessionResponse)) => {
  return http.get('*/session', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSessionResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetSessionSessionIdMockHandler = (overrideResponse?: SessionSessionResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SessionSessionResponse> | SessionSessionResponse)) => {
  return http.get('*/session/:sessionId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetSessionSessionIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostSummarizeMockHandler = (overrideResponse?: SummarizeResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SummarizeResponse> | SummarizeResponse)) => {
  return http.post('*/summarize', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostSummarizeResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostSendSummaryMockHandler = () => {
  return http.post('*/send-summary', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetUserUserIdMockHandler = (overrideResponse?: UserUserResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserUserResponse> | UserUserResponse)) => {
  return http.get('*/user/:userId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUserUserIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPutUserUserIdMockHandler = (overrideResponse?: UserUpdateResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UserUpdateResponse> | UserUpdateResponse)) => {
  return http.put('*/user/:userId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutUserUserIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getPostCreateCognitoUserMockHandler = () => {
  return http.post('*/create-cognito-user', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getMakeItRESTAPIMock = () => [
  getPostGenerateAiReplyLambdaFunctionURLMockHandler(),
  getPostGenerateSessionTitleMockHandler(),
  getGetSessionMockHandler(),
  getGetSessionSessionIdMockHandler(),
  getPostSummarizeMockHandler(),
  getPostSendSummaryMockHandler(),
  getGetUserUserIdMockHandler(),
  getPutUserUserIdMockHandler(),
  getPostCreateCognitoUserMockHandler()]
